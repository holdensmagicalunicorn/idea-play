/* The following code was generated by JFlex 1.4.3 on 11/08/12 0:52 */

/* It's an automatically generated code. Do not modify it. */
package mumoshu.idea.plugins.play.template.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.*;
import com.intellij.lexer.FlexLexer;
import mumoshu.idea.plugins.play.template.lexer.PlayTemplateTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/08/12 0:52 from the specification file
 * <tt>/home/mumoshu/Projects/myideaplugin/src/mumoshu/idea/plugins/play/template/lexer/PlayTemplateFlexLexer.flex</tt>
 */
public class PlayTemplateFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ACTION = 10;
  public static final int TAG_ARGS = 6;
  public static final int MESSAGE = 12;
  public static final int CLOSE_TAG = 8;
  public static final int SCRIPT = 18;
  public static final int YYINITIAL = 0;
  public static final int TAG_NAME = 4;
  public static final int TEXT = 20;
  public static final int EXPRESSION = 2;
  public static final int COMMENT = 16;
  public static final int MESSAGE_ARG = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\5\1\0\1\4\1\0\22\0\1\3\2\0\1\12"+
    "\1\15\1\17\1\16\1\14\2\0\1\7\1\0\1\20\1\0\1\2"+
    "\1\13\12\2\1\6\6\0\32\1\4\0\1\2\1\0\32\1\1\10"+
    "\1\0\1\11\54\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1"+
    "\1\0\37\1\1\0\u013f\1\31\0\162\1\4\0\14\1\16\0\5\1"+
    "\11\0\1\1\213\0\1\1\13\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\24\1\1\0\54\1\1\0\46\1\1\0\5\1\4\0\202\1"+
    "\10\0\105\1\1\0\46\1\2\0\2\1\6\0\20\1\41\0\46\1"+
    "\2\0\1\1\7\0\47\1\110\0\33\1\5\0\3\1\56\0\32\1"+
    "\5\0\13\1\43\0\2\1\1\0\143\1\1\0\1\1\17\0\2\1"+
    "\7\0\2\1\12\0\3\1\2\0\1\1\20\0\1\1\1\0\36\1"+
    "\35\0\3\1\60\0\46\1\13\0\1\1\u0152\0\66\1\3\0\1\1"+
    "\22\0\1\1\7\0\12\1\43\0\10\1\2\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\36\0\2\1"+
    "\1\0\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1"+
    "\1\0\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1"+
    "\17\0\2\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1"+
    "\1\0\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0\3\1"+
    "\17\0\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1"+
    "\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1"+
    "\3\0\10\1\1\0\3\1\113\0\10\1\1\0\3\1\1\0\27\1"+
    "\1\0\12\1\1\0\5\1\46\0\2\1\43\0\10\1\1\0\3\1"+
    "\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0\1\1"+
    "\1\0\2\1\43\0\10\1\1\0\3\1\1\0\27\1\1\0\20\1"+
    "\46\0\2\1\43\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1"+
    "\2\0\7\1\72\0\60\1\1\0\2\1\14\0\7\1\72\0\2\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1"+
    "\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1"+
    "\25\0\2\1\42\0\1\1\77\0\10\1\1\0\42\1\35\0\4\1"+
    "\164\0\42\1\1\0\5\1\1\0\2\1\45\0\6\1\112\0\46\1"+
    "\12\0\51\1\7\0\132\1\5\0\104\1\5\0\122\1\6\0\7\1"+
    "\1\0\77\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1"+
    "\1\0\4\1\2\0\47\1\1\0\1\1\1\0\4\1\2\0\37\1"+
    "\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1"+
    "\2\0\7\1\1\0\7\1\1\0\27\1\1\0\37\1\1\0\1\1"+
    "\1\0\4\1\2\0\7\1\1\0\47\1\1\0\23\1\105\0\125\1"+
    "\14\0\u026c\1\2\0\10\1\12\0\32\1\5\0\113\1\25\0\15\1"+
    "\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0\3\1"+
    "\17\0\64\1\43\0\1\1\4\0\1\1\103\0\130\1\10\0\51\1"+
    "\127\0\35\1\63\0\36\1\2\0\5\1\u038b\0\154\1\224\0\234\1"+
    "\4\0\132\1\6\0\26\1\2\0\6\1\2\0\46\1\2\0\6\1"+
    "\2\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1"+
    "\2\0\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1"+
    "\3\0\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1"+
    "\164\0\1\1\15\0\1\1\202\0\1\1\4\0\1\1\2\0\12\1"+
    "\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1\1\0\3\1\1\0\7\1\3\0\3\1\5\0\5\1"+
    "\u0ebb\0\2\1\52\0\5\1\5\0\2\1\4\0\126\1\6\0\3\1"+
    "\1\0\132\1\1\0\4\1\5\0\50\1\4\0\136\1\21\0\30\1"+
    "\70\0\20\1\u0200\0\u19b6\1\112\0\u51a6\1\132\0\u048d\1\u0773\0\u2ba4\1"+
    "\u215c\0\u012e\1\2\0\73\1\225\0\7\1\14\0\5\1\5\0\1\1"+
    "\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1"+
    "\50\0\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0\32\1"+
    "\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\6\0\1\2\1\0\1\3\1\4\4\0"+
    "\1\3\1\0\1\1\1\5\1\6\1\7\1\4\1\10"+
    "\1\11\1\12\2\0\1\13\1\14\1\0\1\15\1\4"+
    "\2\0\1\2\1\0\1\16\1\0\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\15\1\30"+
    "\1\0\1\31\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[53];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\21\0\42\0\63\0\104\0\125\0\146\0\167"+
    "\0\210\0\231\0\252\0\273\0\314\0\335\0\356\0\377"+
    "\0\u0110\0\u0121\0\u0132\0\125\0\u0143\0\u0154\0\u0165\0\125"+
    "\0\125\0\125\0\u0176\0\u0187\0\125\0\u0198\0\u01a9\0\u01ba"+
    "\0\125\0\u01cb\0\u01dc\0\u01ed\0\u01fe\0\u020f\0\u0220\0\125"+
    "\0\u0231\0\125\0\252\0\125\0\125\0\125\0\125\0\125"+
    "\0\125\0\125\0\u0242\0\125\0\125";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[53];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\13\2\14\2\13\1\15\2\13\1\16\1\17\1\13"+
    "\1\20\1\21\1\22\1\13\11\23\1\24\7\23\1\0"+
    "\1\25\20\0\1\26\1\0\2\27\1\30\1\31\2\0"+
    "\1\32\1\0\1\33\1\34\3\0\1\35\1\0\1\36"+
    "\7\0\1\32\44\0\1\37\5\0\1\40\1\0\1\41"+
    "\5\0\1\42\2\0\1\43\4\0\11\44\1\45\7\44"+
    "\11\46\1\47\7\46\7\13\1\17\2\13\2\17\1\13"+
    "\1\17\1\13\1\17\4\13\2\14\2\13\1\17\2\13"+
    "\2\17\1\13\1\17\1\13\1\17\11\13\1\50\20\13"+
    "\1\51\20\13\1\0\20\13\1\52\17\13\1\17\1\53"+
    "\1\13\2\17\1\13\1\17\1\13\1\17\11\13\1\54"+
    "\10\13\11\23\1\0\7\23\1\0\2\25\17\0\2\26"+
    "\21\0\2\27\25\0\1\55\7\0\14\34\1\56\4\34"+
    "\1\0\2\36\16\0\14\37\1\57\4\37\1\0\2\40"+
    "\25\0\1\60\11\0\14\43\1\61\4\43\11\44\1\0"+
    "\7\44\7\0\1\62\11\0\11\46\1\63\26\46\1\64"+
    "\1\46\13\0\1\65\5\0\17\46\1\0\1\46";

  private static int [] zzUnpackTrans() {
    int [] result = new int[595];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\3\0\1\10\2\0\1\1\1\0\2\1"+
    "\4\0\1\1\1\0\1\1\1\11\3\1\3\11\2\0"+
    "\1\11\1\1\1\0\1\1\1\11\2\0\1\1\1\0"+
    "\1\1\1\0\1\11\1\1\1\11\1\1\7\11\1\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[53];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public PlayTemplateFlexLexer() {
    this((java.io.Reader)null);
  }


  public PlayTemplateFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PlayTemplateFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { yybegin(MESSAGE); return PlayTemplateTokenTypes.MESSAGE_START;
          }
        case 27: break;
        case 12: 
          { return PlayTemplateTokenTypes.TAG_NAME;
          }
        case 28: break;
        case 13: 
          { return PlayTemplateTokenTypes.MESSAGE_ARG;
          }
        case 29: break;
        case 5: 
          { yybegin(YYINITIAL); return PlayTemplateTokenTypes.EXPRESSION_END;
          }
        case 30: break;
        case 17: 
          { yybegin(EXPRESSION); return PlayTemplateTokenTypes.EXPRESSION_START;
          }
        case 31: break;
        case 19: 
          { yybegin(SCRIPT); return PlayTemplateTokenTypes.SCRIPT_START;
          }
        case 32: break;
        case 4: 
          { return PlayTemplateTokenTypes.WHITE_SPACE;
          }
        case 33: break;
        case 10: 
          { yybegin(YYINITIAL); return PlayTemplateTokenTypes.TAG_END;
          }
        case 34: break;
        case 22: 
          { yybegin(MESSAGE_ARG); return PlayTemplateTokenTypes.MESSAGE_KEY;
          }
        case 35: break;
        case 20: 
          { yybegin(YYINITIAL); return PlayTemplateTokenTypes.EMPTY_TAG_END;
          }
        case 36: break;
        case 14: 
          { return PlayTemplateTokenTypes.SCRIPT_BODY;
          }
        case 37: break;
        case 26: 
          { yybegin(CLOSE_TAG); return PlayTemplateTokenTypes.CLOSE_TAG_START;
          }
        case 38: break;
        case 6: 
          { yybegin(TAG_ARGS); return PlayTemplateTokenTypes.TAG_NAME;
          }
        case 39: break;
        case 21: 
          { return PlayTemplateTokenTypes.STRING_LITERAL;
          }
        case 40: break;
        case 7: 
          { return PlayTemplateTokenTypes.ID;
          }
        case 41: break;
        case 24: 
          { yybegin(YYINITIAL); return PlayTemplateTokenTypes.COMMENT_END;
          }
        case 42: break;
        case 11: 
          { return PlayTemplateTokenTypes.COMMA;
          }
        case 43: break;
        case 15: 
          { yybegin(COMMENT); return PlayTemplateTokenTypes.COMMENT_START;
          }
        case 44: break;
        case 1: 
          { return PlayTemplateTokenTypes.EXPRESSION_BODY;
          }
        case 45: break;
        case 8: 
          { yybegin(YYINITIAL); return PlayTemplateTokenTypes.NEW_LINE;
          }
        case 46: break;
        case 25: 
          { yybegin(YYINITIAL); return PlayTemplateTokenTypes.SCRIPT_END;
          }
        case 47: break;
        case 16: 
          { yybegin(TAG_NAME); return PlayTemplateTokenTypes.TAG_START;
          }
        case 48: break;
        case 9: 
          { return PlayTemplateTokenTypes.ARGUMENT_NAME_VALUE_SEPARATOR;
          }
        case 49: break;
        case 2: 
          { return PlayTemplateTokenTypes.COMMENT_BODY;
          }
        case 50: break;
        case 3: 
          { return PlayTemplateTokenTypes.TEXT;
          }
        case 51: break;
        case 23: 
          { yybegin(YYINITIAL); return PlayTemplateTokenTypes.MESSAGE_END;
          }
        case 52: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
